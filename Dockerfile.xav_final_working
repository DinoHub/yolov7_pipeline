## docker build -t yolov7 .
FROM nvcr.io/nvidia/l4t-pytorch:r35.2.1-pth2.0-py3

ENV DEBIAN_FRONTEND=noninteractive

ENV cwd="/home/"
WORKDIR $cwd

RUN apt-get -y update
RUN apt-get -y upgrade
RUN apt -y update

RUN apt-get -y autoremove python-dev

RUN apt-get install --no-install-recommends -y \
    software-properties-common \
    build-essential \
    git curl cmake ffmpeg x264 libx264-dev \
    libgl1-mesa-glx libgtk2.0-dev pkg-config libssl-dev libusb-1.0-0-dev libgtk-3-dev \
    libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev libcurl4-openssl-dev libgomp1 \
    gcc g++ libssl-dev

### This section is an attempt at installing framos
RUN apt-get install \
    --no-install-recommends \
    --assume-yes \
    openssl \
    libusb-1.0 \
    wget \
    net-tools \
    ca-certificates && \
    wget https://www.framos.com/framos3d/D400e/Software/Latest/FRAMOS_D400e_Software_Package_Linux64_ARM_latest.tar.gz && \
    tar -xf FRAMOS_D400e_Software_Package*.tar.gz && \
    #tar xf FRAMOS_D400e_Software_Package_Linux64_x64_*.tar.gz && \
    DEBIAN_FRONTEND=noninteractive apt-get install \
    --no-install-recommends \
    --assume-yes \
    ./FRAMOS_D400e_Software_Package/FRAMOS*.deb && \
    echo ". /etc/profile.d/camerasuite.sh" >> /root/.bashrc

RUN apt-get clean && rm -rf /tmp/* /var/tmp/* /var/lib/apt/lists/* && apt-get -y autoremove

RUN rm -rf /var/cache/apt/archives/

### APT END ###

RUN python3 -m pip install --upgrade pip setuptools

# COPY requirements.txt requirements.txt
# RUN pip3 install --no-cache-dir -r requirements.txt

# YOLOv7
RUN git clone -b inference https://github.com/yhsmiley/yolov7.git && cd yolov7 && python3 -m pip install --no-cache-dir .

RUN export CUDA_HOME=/usr/local/cuda

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib/python3.8/dist-packages/opencv_python.libs/"
ENV CAMERA_SUITE_PACKAGE=/usr/src/framos/camerasuite/CMakePackages
ENV CAMERA_SUITE_INCLUDE_PATH=/usr/include/framos/camerasuite
ENV CAMERA_SUITE_SRC_PATH=/usr/src/framos/camerasuite
ENV CAMERA_SUITE_GENICAM_ROOT_V3_0=/usr/src/framos/camerasuite/GenICam
ENV CAMERA_SUITE_PATH=/usr/src/framos/camerasuite
ENV CAMERA_SUITE_TOOLCHAIN_PATH=/usr/src/framos/camerasuite/Toolchain
ENV CAMERA_SUITE_LIB_PATH=/usr/lib/framos/camerasuite

# RealSense - RUN THIS AFTER BUILDING THE FING THING
RUN cp -r /usr/src/librealsense2 ~ 
RUN cd ~/librealsense2 && \
    mkdir build && \
    cd build && \
    cmake .. \
    -DCMAKE_PREFIX_PATH=/usr/src/framos/camerasuite/CMakePackages \
    # -DBUILD_PYTHON_BINDINGS:bool=true \
    -DPYTHON_EXECUTABLE=/usr/bin/python3 \
    -DPYTHON_INCLUDE_DIR=$(python3 -c "import sysconfig; print(sysconfig.get_path('include'))") \
    -DPYTHON_LIBRARY=$(python3 -c "import sysconfig; print(sysconfig.get_config_var('LIBDIR'))") \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_WITH_CUDA=true \
    -DBUILD_EXAMPLES=true && \
    make -j$(nproc) && \
    cd ~

RUN sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8

RUN sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN sudo curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -
RUN sudo apt update
RUN sudo dpkg --configure -a
RUN sudo apt install -y ros-noetic-ros-base
RUN sudo apt install -y ros-dev-tools
RUN sudo apt install -y ros-noetic-vision-msgs
ENV LD_PRELOAD=/lib/aarch64-linux-gnu/libgomp.so.1
ENV ROS_DOMAIN_ID=123
ENV ROS_MASTER_URI=http://192.168.168.105:11311
SHELL ["/bin/bash", "-c"]
ENTRYPOINT source /opt/ros/noetic/setup.bash && /usr/bin/env bash
